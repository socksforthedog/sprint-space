# SprintSpace API Documentation

## 1. Internal API Specifications

### 1.1 Core APIs

#### Sprint Management
```typescript
interface SprintEndpoints {
  // Create a new sprint
  POST /api/sprints
  Request {
    name: string;
    startDate: ISODate;
    endDate: ISODate;
    teamId: string;
    settings: SprintSettings;
  }
  Response {
    id: string;
    name: string;
    startDate: ISODate;
    endDate: ISODate;
    status: SprintStatus;
    teamId: string;
    settings: SprintSettings;
    createdAt: ISODate;
  }

  // Get sprint details
  GET /api/sprints/:id
  Response {
    // Same as POST response
  }

  // Update sprint
  PUT /api/sprints/:id
  Request {
    // Same as POST request, all fields optional
  }
  Response {
    // Same as POST response
  }

  // List sprints
  GET /api/sprints
  QueryParams {
    teamId?: string;
    status?: SprintStatus;
    startDate?: ISODate;
    endDate?: ISODate;
    page?: number;
    limit?: number;
  }
  Response {
    items: Sprint[];
    total: number;
    page: number;
    limit: number;
  }
}
```

#### Task Management
```typescript
interface TaskEndpoints {
  // Create task
  POST /api/tasks
  Request {
    title: string;
    description?: string;
    assigneeId?: string;
    sprintId?: string;
    priority: TaskPriority;
    dueDate?: ISODate;
    tags?: string[];
  }
  Response {
    id: string;
    title: string;
    description?: string;
    status: TaskStatus;
    assigneeId?: string;
    sprintId?: string;
    priority: TaskPriority;
    dueDate?: ISODate;
    tags: string[];
    createdAt: ISODate;
    updatedAt: ISODate;
  }

  // Additional task endpoints follow similar pattern...
}
```

### 1.2 Error Handling

```typescript
interface APIError {
  code: string;      // Machine-readable error code
  message: string;   // Human-readable error message
  details?: any;     // Additional error context
  timestamp: string; // ISO timestamp
  requestId: string; // For tracking/debugging
}

// Standard Error Codes
enum ErrorCode {
  INVALID_REQUEST = 'INVALID_REQUEST',
  UNAUTHORIZED = 'UNAUTHORIZED',
  FORBIDDEN = 'FORBIDDEN',
  NOT_FOUND = 'NOT_FOUND',
  CONFLICT = 'CONFLICT',
  RATE_LIMITED = 'RATE_LIMITED',
  INTERNAL_ERROR = 'INTERNAL_ERROR'
}
```

### 1.3 WebSocket Events

```typescript
interface WebSocketEvents {
  // Task updates
  'task:updated': {
    taskId: string;
    changes: Partial<Task>;
    userId: string;
    timestamp: ISODate;
  }

  // Sprint updates
  'sprint:statusChanged': {
    sprintId: string;
    oldStatus: SprintStatus;
    newStatus: SprintStatus;
    userId: string;
    timestamp: ISODate;
  }

  // Additional real-time events...
}
```

## 2. External API Integration Guides

### 2.1 Version Control Integration (GitHub/GitLab)

```typescript
interface GitIntegration {
  // OAuth Configuration
  oauth: {
    authorizeUrl: string;
    tokenUrl: string;
    scope: string[];
    clientId: string;
  }

  // Webhook Configuration
  webhooks: {
    events: string[];
    secretKey: string;
    payloadUrl: string;
  }

  // API Usage Example
  example: {
    // Link PR to task
    POST /api/integrations/git/link-pr
    Request {
      taskId: string;
      prUrl: string;
      repository: string;
    }
  }
}
```

### 2.2 CI/CD Integration

```typescript
interface CIIntegration {
  // Build Status Webhook
  POST /api/integrations/ci/build-status
  Request {
    buildId: string;
    status: 'success' | 'failure' | 'in_progress';
    repository: string;
    branch: string;
    commit: string;
    buildUrl: string;
  }
}
```

## 3. Authentication and Authorization

### 3.1 Authentication Flow

```typescript
interface AuthFlow {
  // Login
  POST /api/auth/login
  Request {
    email: string;
    password: string;
  }
  Response {
    accessToken: string;
    refreshToken: string;
    expiresIn: number;
    user: UserProfile;
  }

  // Token Refresh
  POST /api/auth/refresh
  Request {
    refreshToken: string;
  }
  Response {
    accessToken: string;
    refreshToken: string;
    expiresIn: number;
  }
}

// JWT Structure
interface JWTPayload {
  sub: string;       // User ID
  roles: string[];   // User roles
  teams: string[];   // Team IDs
  exp: number;       // Expiration timestamp
  iat: number;       // Issued at timestamp
}
```

### 3.2 Authorization Rules

```typescript
interface AuthorizationRules {
  roles: {
    ADMIN: {
      permissions: ['*']  // All permissions
    },
    TEAM_LEAD: {
      permissions: [
        'sprint:*',           // All sprint operations
        'task:*',            // All task operations
        'team:read',         // View team details
        'team:update',       // Update team settings
        'report:*'           // All reporting operations
      ]
    },
    DEVELOPER: {
      permissions: [
        'sprint:read',
        'task:create',
        'task:read',
        'task:update',
        'task:delete:own'    // Can only delete own tasks
      ]
    }
  }
}
```

## 4. Rate Limiting and Quotas

### 4.1 Rate Limits

```typescript
interface RateLimits {
  // API Rate Limits
  general: {
    window: '1 minute',
    maxRequests: 60
  },

  // Authentication Rate Limits
  auth: {
    login: {
      window: '5 minutes',
      maxAttempts: 5
    },
    tokenRefresh: {
      window: '1 minute',
      maxAttempts: 2
    }
  },

  // Integration Rate Limits
  integrations: {
    github: {
      window: '1 hour',
      maxRequests: 5000
    },
    gitlab: {
      window: '1 hour',
      maxRequests: 2000
    }
  }
}
```

### 4.2 Response Headers

```typescript
interface RateLimitHeaders {
  'X-RateLimit-Limit': string;     // Maximum requests allowed
  'X-RateLimit-Remaining': string; // Remaining requests in window
  'X-RateLimit-Reset': string;     // Time when limit resets (Unix timestamp)
}
```

### 4.3 Storage Quotas

```typescript
interface StorageQuotas {
  attachments: {
    maxSizePerFile: '10MB',
    totalStoragePerTeam: '10GB',
    allowedFileTypes: ['image/*', 'application/pdf',...]
  },
  
  backups: {
    retentionPeriod: '30 days',
    maxBackups: 10
  }
}
```

## 5. API Versioning

```typescript
interface APIVersioning {
  // Version Header
  'Accept': 'application/vnd.sprintspace.v1+json'

  // Version Deprecation
  'X-API-Deprecated': 'true'
  'X-API-Deprecation-Date': '2024-12-31'
  'X-API-Sunset-Date': '2025-06-30'
}
```